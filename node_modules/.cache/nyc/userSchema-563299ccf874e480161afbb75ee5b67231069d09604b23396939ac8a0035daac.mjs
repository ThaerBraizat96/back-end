function cov_1g9occ97bv(){var path="/home/thaerbraizat/back-end/models/userSchema.mjs";var hash="92a7204e6d9dcb446bf775d29b8f7c2af62ef0b2";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/thaerbraizat/back-end/models/userSchema.mjs",statementMap:{"0":{start:{line:1,column:15},end:{line:1,column:50}},"1":{start:{line:5,column:19},end:{line:57,column:1}},"2":{start:{line:6,column:16},end:{line:25,column:4}},"3":{start:{line:19,column:8},end:{line:19,column:61}},"4":{start:{line:21,column:21},end:{line:21,column:28}},"5":{start:{line:22,column:8},end:{line:22,column:42}},"6":{start:{line:41,column:2},end:{line:54,column:4}},"7":{start:{line:42,column:4},end:{line:53,column:5}},"8":{start:{line:43,column:26},end:{line:43,column:51}},"9":{start:{line:44,column:19},end:{line:46,column:8}},"10":{start:{line:47,column:6},end:{line:49,column:7}},"11":{start:{line:48,column:8},end:{line:48,column:20}},"12":{start:{line:50,column:6},end:{line:50,column:39}},"13":{start:{line:52,column:6},end:{line:52,column:33}},"14":{start:{line:56,column:2},end:{line:56,column:15}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:5,column:19},end:{line:5,column:20}},loc:{start:{line:5,column:47},end:{line:57,column:1}},line:5},"1":{name:"(anonymous_1)",decl:{start:{line:18,column:6},end:{line:18,column:7}},loc:{start:{line:18,column:12},end:{line:20,column:7}},line:18},"2":{name:"(anonymous_2)",decl:{start:{line:21,column:6},end:{line:21,column:7}},loc:{start:{line:21,column:20},end:{line:23,column:7}},line:21},"3":{name:"(anonymous_3)",decl:{start:{line:41,column:28},end:{line:41,column:29}},loc:{start:{line:41,column:51},end:{line:54,column:3}},line:41}},branchMap:{"0":{loc:{start:{line:1,column:15},end:{line:1,column:50}},type:"binary-expr",locations:[{start:{line:1,column:15},end:{line:1,column:33}},{start:{line:1,column:37},end:{line:1,column:50}}],line:1},"1":{loc:{start:{line:47,column:6},end:{line:49,column:7}},type:"if",locations:[{start:{line:47,column:6},end:{line:49,column:7}},{start:{line:47,column:6},end:{line:49,column:7}}],line:47}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"92a7204e6d9dcb446bf775d29b8f7c2af62ef0b2"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1g9occ97bv=function(){return actualCoverage;};}return actualCoverage;}cov_1g9occ97bv();const SECRET=(cov_1g9occ97bv().s[0]++,(cov_1g9occ97bv().b[0][0]++,process.env.SECRET)||(cov_1g9occ97bv().b[0][1]++,"mysecretkey"));import jwt from"jsonwebtoken";import bcrypt from"bcrypt";cov_1g9occ97bv().s[1]++;const UserSchema=(sequelizeDB,DataTypes)=>{cov_1g9occ97bv().f[0]++;const Users=(cov_1g9occ97bv().s[2]++,sequelizeDB.define("users",{username:{type:DataTypes.STRING,allowNull:false// unique: true,
},password:{type:DataTypes.STRING,allowNull:false},token:{type:DataTypes.VIRTUAL,get(){cov_1g9occ97bv().f[1]++;cov_1g9occ97bv().s[3]++;return jwt.sign({username:this.username},SECRET);},set(tokenObj){cov_1g9occ97bv().f[2]++;cov_1g9occ97bv().s[4]++;compare;cov_1g9occ97bv().s[5]++;return jwt.sign(tokenObj,SECRET);}}}));// Users.authenticateBasic = async function (username, password) {
//   const user = await this.findOne({ where: { username: username } });
//   // console.log("authenticateBasic user : ", user);
//   // console.log("password :", password);
//   // console.log("user.password : ", user.password);
//   const valid = await bcrypt.compare(password, user.password);
//   console.log("valid : ", valid);
//   if (valid) {
//     console.log("teeeeeeeeeeeeeeeeest ",user);
//     return user;
//   }
//   // throw new Error("Invalid UserName and Password");
// };
cov_1g9occ97bv().s[6]++;Users.authenticateToken=async function(token){cov_1g9occ97bv().f[3]++;cov_1g9occ97bv().s[7]++;try{const parsedToken=(cov_1g9occ97bv().s[8]++,jwt.verify(token,SECRET));// {username: thaer ... }
const user=(cov_1g9occ97bv().s[9]++,await this.findOne({where:{username:parsedToken.username}}));cov_1g9occ97bv().s[10]++;if(user){cov_1g9occ97bv().b[1][0]++;cov_1g9occ97bv().s[11]++;return user;}else{cov_1g9occ97bv().b[1][1]++;}cov_1g9occ97bv().s[12]++;throw new Error("invalid token");}catch(e){cov_1g9occ97bv().s[13]++;throw new Error(e.message);}};cov_1g9occ97bv().s[14]++;return Users;};export default UserSchema;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZXJTY2hlbWEubWpzIl0sIm5hbWVzIjpbIlNFQ1JFVCIsInByb2Nlc3MiLCJlbnYiLCJqd3QiLCJiY3J5cHQiLCJVc2VyU2NoZW1hIiwic2VxdWVsaXplREIiLCJEYXRhVHlwZXMiLCJVc2VycyIsImRlZmluZSIsInVzZXJuYW1lIiwidHlwZSIsIlNUUklORyIsImFsbG93TnVsbCIsInBhc3N3b3JkIiwidG9rZW4iLCJWSVJUVUFMIiwiZ2V0Iiwic2lnbiIsInNldCIsInRva2VuT2JqIiwiY29tcGFyZSIsImF1dGhlbnRpY2F0ZVRva2VuIiwicGFyc2VkVG9rZW4iLCJ2ZXJpZnkiLCJ1c2VyIiwiZmluZE9uZSIsIndoZXJlIiwiRXJyb3IiLCJlIiwibWVzc2FnZSJdLCJtYXBwaW5ncyI6Ink5RUFlWTsyRkFmWixLQUFNQSxDQUFBQSxNQUFNLDBCQUFHLDRCQUFBQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUYsTUFBWiwrQkFBc0IsYUFBdEIsQ0FBSCxDQUFaLENBQ0EsTUFBT0csQ0FBQUEsR0FBUCxLQUFnQixjQUFoQixDQUNBLE1BQU9DLENBQUFBLE1BQVAsS0FBbUIsUUFBbkIsQyx3QkFFQSxLQUFNQyxDQUFBQSxVQUFVLENBQUcsQ0FBQ0MsV0FBRCxDQUFjQyxTQUFkLEdBQTRCLHlCQUM3QyxLQUFNQyxDQUFBQSxLQUFLLDBCQUFHRixXQUFXLENBQUNHLE1BQVosQ0FBbUIsT0FBbkIsQ0FBNEIsQ0FDeENDLFFBQVEsQ0FBRSxDQUNSQyxJQUFJLENBQUVKLFNBQVMsQ0FBQ0ssTUFEUixDQUVSQyxTQUFTLENBQUUsS0FDWDtBQUhRLENBRDhCLENBTXhDQyxRQUFRLENBQUUsQ0FDUkgsSUFBSSxDQUFFSixTQUFTLENBQUNLLE1BRFIsQ0FFUkMsU0FBUyxDQUFFLEtBRkgsQ0FOOEIsQ0FVeENFLEtBQUssQ0FBRSxDQUNMSixJQUFJLENBQUVKLFNBQVMsQ0FBQ1MsT0FEWCxDQUVMQyxHQUFHLEVBQUcsaURBQ0osTUFBT2QsQ0FBQUEsR0FBRyxDQUFDZSxJQUFKLENBQVMsQ0FBRVIsUUFBUSxDQUFFLEtBQUtBLFFBQWpCLENBQVQsQ0FBc0NWLE1BQXRDLENBQVAsQ0FDRCxDQUpJLENBS0xtQixHQUFHLENBQUNDLFFBQUQsQ0FBVyxpREFBQ0MsT0FBTyxDQUFSLHdCQUNaLE1BQU9sQixDQUFBQSxHQUFHLENBQUNlLElBQUosQ0FBU0UsUUFBVCxDQUFtQnBCLE1BQW5CLENBQVAsQ0FDRCxDQVBJLENBVmlDLENBQTVCLENBQUgsQ0FBWCxDQXFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWxDNkMsd0JBb0M3Q1EsS0FBSyxDQUFDYyxpQkFBTixDQUEwQixlQUFnQlAsS0FBaEIsQ0FBdUIsaURBQy9DLEdBQUksQ0FDRixLQUFNUSxDQUFBQSxXQUFXLDBCQUFHcEIsR0FBRyxDQUFDcUIsTUFBSixDQUFXVCxLQUFYLENBQWtCZixNQUFsQixDQUFILENBQWpCLENBQStDO0FBQy9DLEtBQU15QixDQUFBQSxJQUFJLDBCQUFHLEtBQU0sTUFBS0MsT0FBTCxDQUFhLENBQzlCQyxLQUFLLENBQUUsQ0FBRWpCLFFBQVEsQ0FBRWEsV0FBVyxDQUFDYixRQUF4QixDQUR1QixDQUFiLENBQVQsQ0FBVixDQUZFLHlCQUtGLEdBQUllLElBQUosQ0FBVSxxREFDUixNQUFPQSxDQUFBQSxJQUFQLENBQ0QsQ0FGRCxpQ0FMRSx5QkFRRixLQUFNLElBQUlHLENBQUFBLEtBQUosQ0FBVSxlQUFWLENBQU4sQ0FDRCxDQUFDLE1BQU9DLENBQVAsQ0FBVSwwQkFDVixLQUFNLElBQUlELENBQUFBLEtBQUosQ0FBVUMsQ0FBQyxDQUFDQyxPQUFaLENBQU4sQ0FDRCxDQUNGLENBYkQsQ0FwQzZDLHlCQW1EN0MsTUFBT3RCLENBQUFBLEtBQVAsQ0FDRCxDQXBERCxDQXNEQSxjQUFlSCxDQUFBQSxVQUFmIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgU0VDUkVUID0gcHJvY2Vzcy5lbnYuU0VDUkVUIHx8IFwibXlzZWNyZXRrZXlcIjtcbmltcG9ydCBqd3QgZnJvbSBcImpzb253ZWJ0b2tlblwiO1xuaW1wb3J0IGJjcnlwdCBmcm9tIFwiYmNyeXB0XCI7XG5cbmNvbnN0IFVzZXJTY2hlbWEgPSAoc2VxdWVsaXplREIsIERhdGFUeXBlcykgPT4ge1xuICBjb25zdCBVc2VycyA9IHNlcXVlbGl6ZURCLmRlZmluZShcInVzZXJzXCIsIHtcbiAgICB1c2VybmFtZToge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLlNUUklORyxcbiAgICAgIGFsbG93TnVsbDogZmFsc2UsXG4gICAgICAvLyB1bmlxdWU6IHRydWUsXG4gICAgfSxcbiAgICBwYXNzd29yZDoge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLlNUUklORyxcbiAgICAgIGFsbG93TnVsbDogZmFsc2UsXG4gICAgfSxcbiAgICB0b2tlbjoge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLlZJUlRVQUwsXG4gICAgICBnZXQoKSB7XG4gICAgICAgIHJldHVybiBqd3Quc2lnbih7IHVzZXJuYW1lOiB0aGlzLnVzZXJuYW1lIH0sIFNFQ1JFVCk7XG4gICAgICB9LFxuICAgICAgc2V0KHRva2VuT2JqKSB7Y29tcGFyZVxuICAgICAgICByZXR1cm4gand0LnNpZ24odG9rZW5PYmosIFNFQ1JFVCk7XG4gICAgICB9LFxuICAgIH0sXG4gIH0pO1xuXG4gIC8vIFVzZXJzLmF1dGhlbnRpY2F0ZUJhc2ljID0gYXN5bmMgZnVuY3Rpb24gKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuICAvLyAgIGNvbnN0IHVzZXIgPSBhd2FpdCB0aGlzLmZpbmRPbmUoeyB3aGVyZTogeyB1c2VybmFtZTogdXNlcm5hbWUgfSB9KTtcbiAgLy8gICAvLyBjb25zb2xlLmxvZyhcImF1dGhlbnRpY2F0ZUJhc2ljIHVzZXIgOiBcIiwgdXNlcik7XG4gIC8vICAgLy8gY29uc29sZS5sb2coXCJwYXNzd29yZCA6XCIsIHBhc3N3b3JkKTtcbiAgLy8gICAvLyBjb25zb2xlLmxvZyhcInVzZXIucGFzc3dvcmQgOiBcIiwgdXNlci5wYXNzd29yZCk7XG4gIC8vICAgY29uc3QgdmFsaWQgPSBhd2FpdCBiY3J5cHQuY29tcGFyZShwYXNzd29yZCwgdXNlci5wYXNzd29yZCk7XG4gIC8vICAgY29uc29sZS5sb2coXCJ2YWxpZCA6IFwiLCB2YWxpZCk7XG4gIC8vICAgaWYgKHZhbGlkKSB7XG4gIC8vICAgICBjb25zb2xlLmxvZyhcInRlZWVlZWVlZWVlZWVlZWVlZXN0IFwiLHVzZXIpO1xuICAvLyAgICAgcmV0dXJuIHVzZXI7XG4gIC8vICAgfVxuICAvLyAgIC8vIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgVXNlck5hbWUgYW5kIFBhc3N3b3JkXCIpO1xuICAvLyB9O1xuXG4gIFVzZXJzLmF1dGhlbnRpY2F0ZVRva2VuID0gYXN5bmMgZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHBhcnNlZFRva2VuID0gand0LnZlcmlmeSh0b2tlbiwgU0VDUkVUKTsgLy8ge3VzZXJuYW1lOiB0aGFlciAuLi4gfVxuICAgICAgY29uc3QgdXNlciA9IGF3YWl0IHRoaXMuZmluZE9uZSh7XG4gICAgICAgIHdoZXJlOiB7IHVzZXJuYW1lOiBwYXJzZWRUb2tlbi51c2VybmFtZSB9LFxuICAgICAgfSk7XG4gICAgICBpZiAodXNlcikge1xuICAgICAgICByZXR1cm4gdXNlcjtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgdG9rZW5cIik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGUubWVzc2FnZSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBVc2Vycztcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFVzZXJTY2hlbWE7XG4iXX0=