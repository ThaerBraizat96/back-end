function cov_1g9occ97bv(){var path="/home/thaerbraizat/back-end/models/userSchema.mjs";var hash="4397263fd21d19d1d3a90bc20cb77f129b4ba095";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/thaerbraizat/back-end/models/userSchema.mjs",statementMap:{"0":{start:{line:1,column:15},end:{line:1,column:50}},"1":{start:{line:5,column:19},end:{line:57,column:1}},"2":{start:{line:6,column:16},end:{line:25,column:4}},"3":{start:{line:19,column:8},end:{line:19,column:61}},"4":{start:{line:41,column:2},end:{line:54,column:4}},"5":{start:{line:42,column:4},end:{line:53,column:5}},"6":{start:{line:43,column:26},end:{line:43,column:51}},"7":{start:{line:44,column:19},end:{line:46,column:8}},"8":{start:{line:47,column:6},end:{line:49,column:7}},"9":{start:{line:48,column:8},end:{line:48,column:20}},"10":{start:{line:52,column:6},end:{line:52,column:33}},"11":{start:{line:56,column:2},end:{line:56,column:15}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:5,column:19},end:{line:5,column:20}},loc:{start:{line:5,column:47},end:{line:57,column:1}},line:5},"1":{name:"(anonymous_1)",decl:{start:{line:18,column:6},end:{line:18,column:7}},loc:{start:{line:18,column:12},end:{line:20,column:7}},line:18},"2":{name:"(anonymous_2)",decl:{start:{line:41,column:28},end:{line:41,column:29}},loc:{start:{line:41,column:51},end:{line:54,column:3}},line:41}},branchMap:{"0":{loc:{start:{line:1,column:15},end:{line:1,column:50}},type:"binary-expr",locations:[{start:{line:1,column:15},end:{line:1,column:33}},{start:{line:1,column:37},end:{line:1,column:50}}],line:1},"1":{loc:{start:{line:47,column:6},end:{line:49,column:7}},type:"if",locations:[{start:{line:47,column:6},end:{line:49,column:7}},{start:{line:47,column:6},end:{line:49,column:7}}],line:47}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},f:{"0":0,"1":0,"2":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"4397263fd21d19d1d3a90bc20cb77f129b4ba095"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1g9occ97bv=function(){return actualCoverage;};}return actualCoverage;}cov_1g9occ97bv();const SECRET=(cov_1g9occ97bv().s[0]++,(cov_1g9occ97bv().b[0][0]++,process.env.SECRET)||(cov_1g9occ97bv().b[0][1]++,"mysecretkey"));import jwt from"jsonwebtoken";import bcrypt from"bcrypt";cov_1g9occ97bv().s[1]++;const UserSchema=(sequelizeDB,DataTypes)=>{cov_1g9occ97bv().f[0]++;const Users=(cov_1g9occ97bv().s[2]++,sequelizeDB.define("users",{username:{type:DataTypes.STRING,allowNull:false// unique: true,
},password:{type:DataTypes.STRING,allowNull:false},token:{type:DataTypes.VIRTUAL,get(){cov_1g9occ97bv().f[1]++;cov_1g9occ97bv().s[3]++;return jwt.sign({username:this.username},SECRET);}// set(tokenObj) {compare
//   return jwt.sign(tokenObj, SECRET);
// },
}}));// Users.authenticateBasic = async function (username, password) {
//   const user = await this.findOne({ where: { username: username } });
//   // console.log("authenticateBasic user : ", user);
//   // console.log("password :", password);
//   // console.log("user.password : ", user.password);
//   const valid = await bcrypt.compare(password, user.password);
//   console.log("valid : ", valid);
//   if (valid) {
//     console.log("teeeeeeeeeeeeeeeeest ",user);
//     return user;
//   }
//   // throw new Error("Invalid UserName and Password");
// };
cov_1g9occ97bv().s[4]++;Users.authenticateToken=async function(token){cov_1g9occ97bv().f[2]++;cov_1g9occ97bv().s[5]++;try{const parsedToken=(cov_1g9occ97bv().s[6]++,jwt.verify(token,SECRET));// {username: thaer ... }
const user=(cov_1g9occ97bv().s[7]++,await this.findOne({where:{username:parsedToken.username}}));cov_1g9occ97bv().s[8]++;if(user){cov_1g9occ97bv().b[1][0]++;cov_1g9occ97bv().s[9]++;return user;}else{cov_1g9occ97bv().b[1][1]++;}// return ("invalid token");
}catch(e){cov_1g9occ97bv().s[10]++;throw new Error(e.message);}};cov_1g9occ97bv().s[11]++;return Users;};export default UserSchema;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZXJTY2hlbWEubWpzIl0sIm5hbWVzIjpbIlNFQ1JFVCIsInByb2Nlc3MiLCJlbnYiLCJqd3QiLCJiY3J5cHQiLCJVc2VyU2NoZW1hIiwic2VxdWVsaXplREIiLCJEYXRhVHlwZXMiLCJVc2VycyIsImRlZmluZSIsInVzZXJuYW1lIiwidHlwZSIsIlNUUklORyIsImFsbG93TnVsbCIsInBhc3N3b3JkIiwidG9rZW4iLCJWSVJUVUFMIiwiZ2V0Iiwic2lnbiIsImF1dGhlbnRpY2F0ZVRva2VuIiwicGFyc2VkVG9rZW4iLCJ2ZXJpZnkiLCJ1c2VyIiwiZmluZE9uZSIsIndoZXJlIiwiZSIsIkVycm9yIiwibWVzc2FnZSJdLCJtYXBwaW5ncyI6Im9vRUFlWTsyRkFmWixLQUFNQSxDQUFBQSxNQUFNLDBCQUFHLDRCQUFBQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUYsTUFBWiwrQkFBc0IsYUFBdEIsQ0FBSCxDQUFaLENBQ0EsTUFBT0csQ0FBQUEsR0FBUCxLQUFnQixjQUFoQixDQUNBLE1BQU9DLENBQUFBLE1BQVAsS0FBbUIsUUFBbkIsQyx3QkFFQSxLQUFNQyxDQUFBQSxVQUFVLENBQUcsQ0FBQ0MsV0FBRCxDQUFjQyxTQUFkLEdBQTRCLHlCQUM3QyxLQUFNQyxDQUFBQSxLQUFLLDBCQUFHRixXQUFXLENBQUNHLE1BQVosQ0FBbUIsT0FBbkIsQ0FBNEIsQ0FDeENDLFFBQVEsQ0FBRSxDQUNSQyxJQUFJLENBQUVKLFNBQVMsQ0FBQ0ssTUFEUixDQUVSQyxTQUFTLENBQUUsS0FDWDtBQUhRLENBRDhCLENBTXhDQyxRQUFRLENBQUUsQ0FDUkgsSUFBSSxDQUFFSixTQUFTLENBQUNLLE1BRFIsQ0FFUkMsU0FBUyxDQUFFLEtBRkgsQ0FOOEIsQ0FVeENFLEtBQUssQ0FBRSxDQUNMSixJQUFJLENBQUVKLFNBQVMsQ0FBQ1MsT0FEWCxDQUVMQyxHQUFHLEVBQUcsaURBQ0osTUFBT2QsQ0FBQUEsR0FBRyxDQUFDZSxJQUFKLENBQVMsQ0FBRVIsUUFBUSxDQUFFLEtBQUtBLFFBQWpCLENBQVQsQ0FBc0NWLE1BQXRDLENBQVAsQ0FDRCxDQUNEO0FBQ0E7QUFDQTtBQVBLLENBVmlDLENBQTVCLENBQUgsQ0FBWCxDQXFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWxDNkMsd0JBb0M3Q1EsS0FBSyxDQUFDVyxpQkFBTixDQUEwQixlQUFnQkosS0FBaEIsQ0FBdUIsaURBQy9DLEdBQUksQ0FDRixLQUFNSyxDQUFBQSxXQUFXLDBCQUFHakIsR0FBRyxDQUFDa0IsTUFBSixDQUFXTixLQUFYLENBQWtCZixNQUFsQixDQUFILENBQWpCLENBQStDO0FBQy9DLEtBQU1zQixDQUFBQSxJQUFJLDBCQUFHLEtBQU0sTUFBS0MsT0FBTCxDQUFhLENBQzlCQyxLQUFLLENBQUUsQ0FBRWQsUUFBUSxDQUFFVSxXQUFXLENBQUNWLFFBQXhCLENBRHVCLENBQWIsQ0FBVCxDQUFWLENBRkUsd0JBS0YsR0FBSVksSUFBSixDQUFVLG9EQUNSLE1BQU9BLENBQUFBLElBQVAsQ0FDRCxDQUZELGlDQUdBO0FBQ0QsQ0FBQyxNQUFPRyxDQUFQLENBQVUsMEJBQ1YsS0FBTSxJQUFJQyxDQUFBQSxLQUFKLENBQVVELENBQUMsQ0FBQ0UsT0FBWixDQUFOLENBQ0QsQ0FDRixDQWJELENBcEM2Qyx5QkFtRDdDLE1BQU9uQixDQUFBQSxLQUFQLENBQ0QsQ0FwREQsQ0FzREEsY0FBZUgsQ0FBQUEsVUFBZiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFNFQ1JFVCA9IHByb2Nlc3MuZW52LlNFQ1JFVCB8fCBcIm15c2VjcmV0a2V5XCI7XG5pbXBvcnQgand0IGZyb20gXCJqc29ud2VidG9rZW5cIjtcbmltcG9ydCBiY3J5cHQgZnJvbSBcImJjcnlwdFwiO1xuXG5jb25zdCBVc2VyU2NoZW1hID0gKHNlcXVlbGl6ZURCLCBEYXRhVHlwZXMpID0+IHtcbiAgY29uc3QgVXNlcnMgPSBzZXF1ZWxpemVEQi5kZWZpbmUoXCJ1c2Vyc1wiLCB7XG4gICAgdXNlcm5hbWU6IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5TVFJJTkcsXG4gICAgICBhbGxvd051bGw6IGZhbHNlLFxuICAgICAgLy8gdW5pcXVlOiB0cnVlLFxuICAgIH0sXG4gICAgcGFzc3dvcmQ6IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5TVFJJTkcsXG4gICAgICBhbGxvd051bGw6IGZhbHNlLFxuICAgIH0sXG4gICAgdG9rZW46IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5WSVJUVUFMLFxuICAgICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gand0LnNpZ24oeyB1c2VybmFtZTogdGhpcy51c2VybmFtZSB9LCBTRUNSRVQpO1xuICAgICAgfSxcbiAgICAgIC8vIHNldCh0b2tlbk9iaikge2NvbXBhcmVcbiAgICAgIC8vICAgcmV0dXJuIGp3dC5zaWduKHRva2VuT2JqLCBTRUNSRVQpO1xuICAgICAgLy8gfSxcbiAgICB9LFxuICB9KTtcblxuICAvLyBVc2Vycy5hdXRoZW50aWNhdGVCYXNpYyA9IGFzeW5jIGZ1bmN0aW9uICh1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgLy8gICBjb25zdCB1c2VyID0gYXdhaXQgdGhpcy5maW5kT25lKHsgd2hlcmU6IHsgdXNlcm5hbWU6IHVzZXJuYW1lIH0gfSk7XG4gIC8vICAgLy8gY29uc29sZS5sb2coXCJhdXRoZW50aWNhdGVCYXNpYyB1c2VyIDogXCIsIHVzZXIpO1xuICAvLyAgIC8vIGNvbnNvbGUubG9nKFwicGFzc3dvcmQgOlwiLCBwYXNzd29yZCk7XG4gIC8vICAgLy8gY29uc29sZS5sb2coXCJ1c2VyLnBhc3N3b3JkIDogXCIsIHVzZXIucGFzc3dvcmQpO1xuICAvLyAgIGNvbnN0IHZhbGlkID0gYXdhaXQgYmNyeXB0LmNvbXBhcmUocGFzc3dvcmQsIHVzZXIucGFzc3dvcmQpO1xuICAvLyAgIGNvbnNvbGUubG9nKFwidmFsaWQgOiBcIiwgdmFsaWQpO1xuICAvLyAgIGlmICh2YWxpZCkge1xuICAvLyAgICAgY29uc29sZS5sb2coXCJ0ZWVlZWVlZWVlZWVlZWVlZWVzdCBcIix1c2VyKTtcbiAgLy8gICAgIHJldHVybiB1c2VyO1xuICAvLyAgIH1cbiAgLy8gICAvLyB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIFVzZXJOYW1lIGFuZCBQYXNzd29yZFwiKTtcbiAgLy8gfTtcblxuICBVc2Vycy5hdXRoZW50aWNhdGVUb2tlbiA9IGFzeW5jIGZ1bmN0aW9uICh0b2tlbikge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBwYXJzZWRUb2tlbiA9IGp3dC52ZXJpZnkodG9rZW4sIFNFQ1JFVCk7IC8vIHt1c2VybmFtZTogdGhhZXIgLi4uIH1cbiAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCB0aGlzLmZpbmRPbmUoe1xuICAgICAgICB3aGVyZTogeyB1c2VybmFtZTogcGFyc2VkVG9rZW4udXNlcm5hbWUgfSxcbiAgICAgIH0pO1xuICAgICAgaWYgKHVzZXIpIHtcbiAgICAgICAgcmV0dXJuIHVzZXI7XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gKFwiaW52YWxpZCB0b2tlblwiKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZS5tZXNzYWdlKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFVzZXJzO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgVXNlclNjaGVtYTtcbiJdfQ==